source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15)
nn.trn
# 3 layer, linear
nn.orig = NNModel(input.dim=4, layers=c(3,2,1), activations=c('linear','linear','linear'), learning.rate=0.1)
nn = nn.orig
nn.orig$layers$L1$weights = matrix(c(rep(1,4),rep(2,4),rep(3,4)), nrow=4)
nn.orig$layers$L2$weights = matrix(c(rep(1,3),rep(2,3)), nrow=3)
nn.orig$layers$L3$weights = matrix(rep(3,2),nrow=2)
X.trn = matrix(rnorm(400,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15)
nn.trn
nn.orig
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15)
nn.trn
# Linear regression, single layer
nn = NNModel(input.dim=3, layers=1, activations='linear', learning.rate=0.1)
X.trn = matrix(rnorm(300,0,1), nrow=100)
Y.trn = matrix(5 * X.trn[,1] - 7.25 * X.trn[, 2] + 6.83 * X.trn[, 3], nrow=100)
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15)
nn.trn
source('/storage/ColoComp/Development/NNFS/NNFS.R')
source('/storage/ColoComp/Development/NNFS/NNFS.R')
source('/storage/ColoComp/Development/NNFS/NNFS.R')
# Linear regression, single layer
nn = NNModel(input.dim=3, layers=1, activations='linear', learning.rate=0.1)
# Linear regression, single layer
nn = NNModel(input.dim=3, layers=1, activations='linear')
X.trn = matrix(rnorm(300,0,1), nrow=100)
Y.trn = matrix(5 * X.trn[,1] - 7.25 * X.trn[, 2] + 6.83 * X.trn[, 3], nrow=100)
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.1)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.5)
nn.trn
# 2 layer, linear
nn.orig = NNModel(input.dim=3, layers=c(3,1), activations=c('linear','linear'))
nn=nn.orig
nn.orig$layers$L1$weights = matrix(c(1,1,1,2,2,2,3,3,3), nrow=3)
nn.orig$layers$L2$weights = matrix(c(1,1,1), nrow=3)
X.trn = matrix(rnorm(300,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L2$z
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn
nn.orig
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.5)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.5)
nn.trn
nn.orig
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.orig = NNModel(input.dim=3, layers=c(3,1), activations=c('linear','linear'))
nn=nn.orig
nn.orig$layers$L1$weights = matrix(c(1,1,1,2,2,2,3,3,3), nrow=3)
nn.orig$layers$L2$weights = matrix(c(1,1,1), nrow=3)
X.trn = matrix(rnorm(300,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L2$z
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=15, learning.rate=0.25)
nn.trn
X.trn[1,]
X.trn[1,,drop=FALSE]
a1 =X.trn[1,,drop=FALSE] %*% nn$layers$L1$weights
a1
nn$layers$L1$weights
nn$layers$L2$weights
a2 = a1 %*% nn$layers$L2$weights
a2
Y.trn[1]
nn.fp
a1 =X.trn[1,,drop=FALSE] %*% nn.orig$layers$L1$weights
a1
X.trn[1,]
nn.orig$layers$L1$weights
sum(X.trn[1,])
sum(X.trn[1,])*2
a2 = a1 %*% nn.orig$layers$L2$weights
a2
Y.trn[1,]
nn.orig
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=1, learning.rate=0.25)
traceback()
source('/storage/ColoComp/Development/NNFS/NNFS.R')
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=1, learning.rate=0.25)
Y.trn
X.trn
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=1, learning.rate=0.25)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=2, learning.rate=0.25)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=500, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
nn.trn
source('/storage/ColoComp/Development/NNFS/NNFS.R')
source('/storage/ColoComp/Development/NNFS/NNFS.R')
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
delta
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
delta
?mapply
mapply( function(m) {m},
Y.trn - NNmod.old$layers[[layer]]$z, SIMPLIFY=FALSE)
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
mapply( function(m) {m},
Y.trn - NNmod.old$layers[[layer]]$z, SIMPLIFY=FALSE)
lapply( Y.trn - NNmod.old$layers[[layer]]$z, function(m) {m})
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
delta
lapply(delta, function(m) {NNmod$layers[[next.layer]]$weights %*% m})
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
delta
NNmod.old$layers[[prev.layer]]$z
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
delta
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
delta
NNmod.old$layers[[prev.layer]]$z
mapply( function(del,z) {
del %*% z}, delta, NNmod.old$layers[[prev.layer]]$z, SIMPLIFY=FALSE)
mapply( function(del,z) {
del }, delta, NNmod.old$layers[[prev.layer]]$z, SIMPLIFY=FALSE)
delta
delta
mapply( function(del,z) {
z }, delta, NNmod.old$layers[[prev.layer]]$z, SIMPLIFY=FALSE)
NNmod.old$layers[[prev.layer]]$z
z=NNmod.old$layers[[prev.layer]]$z
z
split(z,row(x))
split(z,row(z))
row(z)
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
mapply( function(del,z) {
del %*% z}, delta, split(NNmod.old$layers[[prev.layer]]$z,
row(NNmod.old$layers[[prev.layer]]$z)),
SIMPLIFY=FALSE)
delta
z
NNmod.old$layers[[prev.layer]]$z
delta[[1]]
mapply( function(del,z) {
del %*% z}, delta, split(NNmod.old$layers[[prev.layer]]$z,
row(NNmod.old$layers[[prev.layer]]$z)),
SIMPLIFY=FALSE)[[1]]
12.37657 * 0.038321854
12.37657 *  0.0116375096
wt.adj
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
wt.adj
delist(wt.adj)
unlist(wt.adj)
q = matrix(unlist(wt.adj),ncol=3, byrow=TRUE)
q
colMeans(q)
avg.wt.adj
NNmod$layers[[layer]]$weights
delta
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
wt.adj
avg.wt.adj
NNmod$layers[[layer]]$weights
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=5000, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.orig = NNModel(input.dim=3, layers=c(3,1), activations=c('linear','linear'))
nn=nn.orig
nn.orig$layers$L1$weights = matrix(c(1,1,1,2,2,2,3,3,3), nrow=3)
nn.orig$layers$L2$weights = matrix(c(1,1,1), nrow=3)
X.trn = matrix(rnorm(300,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L2$z
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=1, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn = NNModel(input.dim=3, layers=1, activations='linear')
X.trn = matrix(rnorm(300,0,1), nrow=100)
Y.trn = matrix(5 * X.trn[,1] - 7.25 * X.trn[, 2] + 6.83 * X.trn[, 3], nrow=100)
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.5)
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.5)
nn.trn
nn.orig = NNModel(input.dim=4, layers=c(3,2,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$weights = matrix(c(rep(1,4),rep(2,4),rep(3,4)), nrow=4)
nn.orig$layers$L2$weights = matrix(c(rep(1,3),rep(2,3)), nrow=3)
nn.orig$layers$L3$weights = matrix(rep(3,2),nrow=2)
X.trn = matrix(rnorm(400,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn
nn.orig
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
Y.trn - NNmod.old$layers[[layer]]$z
l
NNmod.old$layers[[prev.layer]]$z
avg.wt.adj
wt.adj
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn
nn.orig
nn.fp
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
delta
NNmod$layers[[next.layer]]$weights
nn.trn = train(nn.orig,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
nn.tst = nn.orig
nn.orig$layers$L1$weights = matrix(c(rep(2,4),rep(2,4),rep(2,4)), nrow=4)
nn.orig$layers$L2$weights = matrix(c(rep(2,3),rep(2,3)), nrow=3)
nn.orig$layers$L3$weights = matrix(rep(2,2),nrow=2)
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
nn.tst = nn.orig
nn.tst
nn.tst$layers$L1$weights = matrix(c(rep(2,4),rep(2,4),rep(2,4)), nrow=4)
nn.tst$layers$L2$weights = matrix(c(rep(2,3),rep(2,3)), nrow=3)
nn.tst$layers$L3$weights = matrix(rep(2,2),nrow=2)
nn.tst
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
delta
delta
lapply(delta, function(m) {
NNmod$layers[[next.layer]]$weights %*% m})
delta
NNmod$layers[[next.layer]]$weights
delta[[1]]
16.58604*16.86714
delta
seq(0.1,0.12,0.1)
seq(0.1,0.12,by=0.1)
?seq
seq(0.1,0.12,0.1)
nn.tst$layers$L1$weights = matrix(seq(0.01,0.12,0.1), nrow=4)
nn.tst
nn.tst$layers$L1$weights = matrix(seq(0.01,0.12,0.01), nrow=4)
nn.tst
nn.tst$layers$L2$weights = matrix(seq(0.13,0.18,0.01)), nrow=3)
nn.tst$layers$L2$weights = matrix(seq(0.13,0.18,0.01), nrow=3)
nn.tst$layers$L3$weights = matrix(seq(0.19,0.20,0.01),nrow=2)
nn.tst
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
unlist(delta)
NNmod$layers[[next.layer]]$weights
unlist(delta)
matrix(unlist(delta), ncol=2)
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
unlist(delta)
NNmod.old$layers[[next.layer]]$weights
matrix(unlist(delta), ncol=2)
151.767929*.19
151.767929*.20
delta
delta
rm(deltat)
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
delta
delta
[,1]
[1,] 28.83591
[2,] 30.35359
NNmod.old$layers[[next.layer]]$weights
28.83591*.13 + 30.35359 * .16
l
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.01)
nn.trn
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=1, mini.batch.size=15, learning.rate=0.01)
nn.trn
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=2, mini.batch.size=15, learning.rate=0.01)
nn.trn
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=2, mini.batch.size=15, learning.rate=0.01)
NNmod
NNmod
NNmod
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=2, mini.batch.size=15, learning.rate=0.01)
Nnmod
NNmod
NNmod
e
mb
NNmod
NNmod
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=2, mini.batch.size=15, learning.rate=0.01)
nn.trn
nn = NNModel(input.dim=3, layers=1, activations='linear')
X.trn = matrix(rnorm(300,0,1), nrow=100)
Y.trn = matrix(5 * X.trn[,1] - 7.25 * X.trn[, 2] + 6.83 * X.trn[, 3], nrow=100)
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.5)
nn.trn
nn.orig = NNModel(input.dim=3, layers=c(3,1), activations=c('linear','linear'))
nn=nn.orig
nn.orig$layers$L1$weights = matrix(c(1,1,1,2,2,2,3,3,3), nrow=3)
nn.orig$layers$L2$weights = matrix(c(1,1,1), nrow=3)
X.trn = matrix(rnorm(300,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L2$z
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.25)
nn.trn
nn.orig = NNModel(input.dim=4, layers=c(3,2,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$weights = matrix(c(rep(1,4),rep(2,4),rep(3,4)), nrow=4)
nn.orig$layers$L2$weights = matrix(c(rep(1,3),rep(2,3)), nrow=3)
nn.orig$layers$L3$weights = matrix(rep(3,2),nrow=2)
X.trn = matrix(rnorm(400,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
nn.tst = nn.orig
nn.tst$layers$L1$weights = matrix(seq(0.01,0.12,0.01), nrow=4)
nn.tst$layers$L2$weights = matrix(seq(0.13,0.18,0.01), nrow=3)
nn.tst$layers$L3$weights = matrix(seq(0.19,0.20,0.01),nrow=2)
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.tst = nn.orig
nn.tst$layers$L1$weights = matrix(seq(0.01,0.12,0.01), nrow=4)
nn.tst$layers$L2$weights = matrix(seq(0.13,0.18,0.01), nrow=3)
nn.tst$layers$L3$weights = matrix(seq(0.19,0.20,0.01),nrow=2)
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
NNmod
NNmod
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
NNmod
mb
mb
NNmod
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
avg.wt.adj
wt.adj
delta
wt.adj
wt.adj
wt.adj
avg.wt.adj
avg.wt.adj
avg.wt.adj
avg.wt.adj
avg.wt.adj
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.01)
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.001)
nn.trn
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=100, mini.batch.size=15, learning.rate=0.001)
nn = NNModel(input.dim=3, layers=1, activations='linear')
X.trn = matrix(rnorm(300,0,1), nrow=100)
Y.trn = matrix(5 * X.trn[,1] - 7.25 * X.trn[, 2] + 6.83 * X.trn[, 3], nrow=100)
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.5)
nn.trn
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn = NNModel(input.dim=3, layers=1, activations='linear')
X.trn = matrix(rnorm(300,0,1), nrow=100)
Y.trn = matrix(5 * X.trn[,1] - 7.25 * X.trn[, 2] + 6.83 * X.trn[, 3], nrow=100)
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.5)
nn.orig = NNModel(input.dim=3, layers=c(3,1), activations=c('linear','linear'))
nn=nn.orig
nn.orig$layers$L1$weights = matrix(c(1,1,1,2,2,2,3,3,3), nrow=3)
nn.orig$layers$L2$weights = matrix(c(1,1,1), nrow=3)
X.trn = matrix(rnorm(300,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L2$z
nn.trn = train(nn,X.trn,Y.trn, epochs=50, mini.batch.size=15, learning.rate=0.25)
nn.orig = NNModel(input.dim=4, layers=c(3,2,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$weights = matrix(c(rep(1,4),rep(2,4),rep(3,4)), nrow=4)
nn.orig$layers$L2$weights = matrix(c(rep(1,3),rep(2,3)), nrow=3)
nn.orig$layers$L3$weights = matrix(rep(3,2),nrow=2)
X.trn = matrix(rnorm(400,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
source('/storage/ColoComp/Development/NNFS/NNFS.R')
# 3 layer, small, linear
nn.orig = NNModel(input.dim=2, layers=c(2,2,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$weights = matrix(c(1,2,3,4), nrow=2)
nn.orig$layers$L2$weights = matrix(c(1,2,3,4), nrow=2)
nn.orig$layers$L3$weights = matrix(c(1,2),nrow=2)
X.trn = matrix(rnorm(200,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
Y.trn
nn.tst = nn.orig
nn.tst$layers$L1$weights = matrix(seq(0.01,0.04,0.01), nrow=2)
nn.tst$layers$L2$weights = matrix(seq(0.05,0.08,0.01), nrow=2)
nn.tst$layers$L3$weights = matrix(seq(0.09,0.10,0.01),nrow=2)
nn.orig
nn.tst
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.tst
nn.orig
nn.tst
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
Y.trn
NNmod.old$layers[[layer]]$z
X.trn
NNmod.old$layers[[prev.layer]]$z
NNmod.old$layers[[prev.layer]]$z
split(NNmod.old$layers[[prev.layer]]$z,
row(NNmod.old$layers[[prev.layer]]$z))
NNmod.old$layers[[prev.layer]]$z
delta[[1]]
wt.adj[[1]]
45.75982*0.002847328
wt.adj
avg.wt.adj
NNmod$layers[[layer]]$weights
learning.rate * t(avg.wt.adj)
NNmod
NNmod.old$layers[[next.layer]]$weights
delta[[1]]
delta[[1]]
NNmod.old$layers[[next.layer]]$weights
.09*45.75982
delta
split(NNmod.old$layers[[prev.layer]]$z,
row(NNmod.old$layers[[prev.layer]]$z))
NNmod.old$layers[[prev.layer]]$z
delta[[1]]
length(wt.adj)
Reduce('+', wt.adj)
avg.wt.adj
wt.adj
NNmod.old$layers[[next.layer]]$weights
delta
st.adj
wt.adj
Y.trn
NNmod.old$layers$L3$z
debugSource('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
layer
layer
layer
layer
layer
delta
nn.orig = NNModel(input.dim=1, layers=c(1,1,1), activations=c('linear','linear','linear'))
nn=nn.orig
nn.orig$layers$L1$weights
nn.orig$layers$L1$weights = 2
nn.orig$layers$L2$weights = 3
nn.orig$layers$L3$weights = 4
X.trn(matrix(rnorm(100,0,1), nrow=100))
X.trn=matrix(rnorm(100,0,1), nrow=100))
X.trn=matrix(rnorm(100,0,1), nrow=100)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn=nn.fp$layers$L3$z
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
delta
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.01)
source('/storage/ColoComp/Development/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.01)
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=15, learning.rate=0.1)
