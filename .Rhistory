source('/storage/Temp/NNFS/NNFS.R')
# 3 layer, one node per layer (debugging)
nn.orig = NNModel(input.dim = 1, layers=c(1,1,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$Weights = matrix(2,nrow=1)
nn.orig$layers$L2$Weights = matrix(4,nrow=1)
nn.orig$layers$L3$Weights = matrix(6,nrow=1)
X.trn = matrix(rnorm(25,0,1), nrow=25)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
nn.orig
nn.trn
X.trn
Y.trn
X.trn[1,1] * 2 *4 *6
nn.orig
debugSource('/storage/Temp/NNFS/NNFS.R')
nn.fp = forward.prop(nn.orig,X.trn)
X.trn
X.trn %*% NNmod$layers[[layers[l]]]$weights
NNmod$layers[[layers[l]]]$weights
nn.orig
# 3 layer, one node per layer (debugging)
nn.orig = NNModel(input.dim = 1, layers=c(1,1,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$Weights = matrix(2,nrow=1)
nn.orig$layers$L2$Weights = matrix(4,nrow=1)
nn.orig$layers$L3$Weights = matrix(6,nrow=1)
X.trn = matrix(rnorm(25,0,1), nrow=25)
nn.fp = forward.prop(nn.orig,X.trn)
X.trn
NNmod$layers[[layers[l]]]$weights
nn.orig
# 3 layer, one node per layer (debugging)
nn.orig = NNModel(input.dim = 1, layers=c(1,1,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$weights = matrix(2,nrow=1)
nn.orig$layers$L2$weights = matrix(4,nrow=1)
nn.orig$layers$L3$weights = matrix(6,nrow=1)
X.trn = matrix(rnorm(25,0,1), nrow=25)
nn.fp = forward.prop(nn.orig,X.trn)
NNmod$layers[[layers[l]]]$weights
NNmod$layers[[layers[l]]]$weights
X.trn
a
NNmod$layers[[layers[l-1]]]$z
NNmod$layers[[layers[l]]]$weights
nn.fp
Y.trn = nn.fp$layers$L3$z
nn.fp
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
source('/storage/Temp/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
nn.trn
debugSource('/storage/Temp/NNFS/NNFS.R')
debugSource('/storage/Temp/NNFS/NNFS.R')
source('/storage/Temp/NNFS/NNFS.R')
debugSource('/storage/Temp/NNFS/NNFS.R')
debugSource('/storage/Temp/NNFS/NNFS.R')
nn.trn = train(nn,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
Y.trn
NNmod.old$layers[[layer]]$z
NNmod.old
X.trn
NNmod.old$layers$L1$weights
NNmod.old$layers$L2$weights
NNmod.old$layers$L3$weights
=-2.127367839 * 0.007195094 * 0.01220551 *-0.02191384
-2.127367839 * 0.007195094 * 0.01220551 *-0.02191384
Y.trn
-102.1136563 - 4.094053e-06
delta
delta
split(NNmod.old$layers[[prev.layer]]$z,
row(NNmod.old$layers[[prev.layer]]$z))
wt.adj
-102.1137 * -0.0001868249
avg.wt.adj
unlist(wt.adj)
mean(unlist(wt.adj))
NNmod$layers[[layer]]$weights
NNmod
delta
delta
NNmod.old$layers[[next.layer]]$weights
delta
10.19886 * -0.02191384
wt.adj
split(NNmod.old$layers[[prev.layer]]$z,
row(NNmod.old$layers[[prev.layer]]$z)
)
delta
-0.01530661 *  2.237702
wt.adj
avg.wt.adj
mean(unlist(wt.adj))
delta
delta
nn.trn
nn.tst = nn.orig
nn.orig$layers$L1$weights = matrix(1,nrow=1)
nn.orig$layers$L2$weights = matrix(3,nrow=1)
nn.orig$layers$L3$weights = matrix(5,nrow=1)
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
debugSource('/storage/Temp/NNFS/NNFS.R')
debugSource('/storage/Temp/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
Y.trn
NNmod.old$layers[[layer]]$z
nn.tst
# 3 layer, one node per layer (debugging)
nn.orig = NNModel(input.dim = 1, layers=c(1,1,1), activations=c('linear','linear','linear'))
nn = nn.orig
nn.orig$layers$L1$weights = matrix(2,nrow=1)
nn.orig$layers$L2$weights = matrix(4,nrow=1)
nn.orig$layers$L3$weights = matrix(6,nrow=1)
X.trn = matrix(rnorm(25,0,1), nrow=25)
nn.fp = forward.prop(nn.orig,X.trn)
Y.trn = nn.fp$layers$L3$z
nn.tst = nn.orig
nn.tst$layers$L1$weights = matrix(1,nrow=1)
nn.tst$layers$L2$weights = matrix(3,nrow=1)
nn.tst$layers$L3$weights = matrix(5,nrow=1)
nn.tst
debugSource('/storage/Temp/NNFS/NNFS.R')
debugSource('/storage/Temp/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
Y.trn
NNmod.old$layers[[layer]]$z
delta
delta
NNmod.old$layers[[next.layer]]$weights
delta
delta
NNmod.old$layers[[next.layer]]$weights
delta
Y.trn
NNmod.old$layers[[layer]]$z
delta
delta
source('/storage/Temp/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
nn.trn
source('/storage/Temp/NNFS/NNFS.R')
nn.trn = train(nn.tst,X.trn,Y.trn, epochs=10, mini.batch.size=10, learning.rate=0.1)
nn.trn
debugSource('/storage/Temp/NNFS/NNFS.R')
